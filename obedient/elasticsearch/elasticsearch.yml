cluster.name: ${ name }
node:
    name: ${ this.name }-${ this.ship.name }
    datacenter: ${ this.ship.datacenter }
transport.tcp.port: ${ this.doors['peer'].port }
http.port: ${ this.doors['http'].port }
network.publish_host: ${ this.ship.fqdn }
discovery:
    type: com.sonian.elasticsearch.zookeeper.discovery.ZooKeeperDiscoveryModule
sonian.elasticsearch.zookeeper:
    settings.enabled: False
    client.host: ${ ','.join(['{}:{}'.format(c.ship.fqdn, c.doors['client'].externalport) for c in zookeepers]) }
    discovery.state_publishing.enabled: True
zookeeper.root: /${ name }/elasticsearch
cluster.routing.allocation:
    awareness:
        force.datacenter.values: ${ sorted({c.ship.datacenter for c in containers}) }
        attributes: datacenter
    cluster_concurrent_rebalance: 10
    disk.threshold_enabled: True
    node_initial_primaries_recoveries: 10
    node_concurrent_recoveries: 10
index:
    number_of_shards: 5
    number_of_replicas: 2
    mapper.default_mapping_location: ${ this.volumes['config'].files['mapping.json'].fulldest }
    query.default_field: msg
    store.type: mmapfs
    translog.flush_threshold_ops: 50000
    refresh_interval: 10s
indices:
    recovery.concurrent_streams: 20
    memory.index_buffer_size: 30%

marvel.agent:
% if len(marvel_hosts) > 0:
    exporter.es.hosts: ${ marvel_hosts }
% else:
    enabled: false
% endif
